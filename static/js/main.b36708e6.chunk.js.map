{"version":3,"sources":["components/dynamicForm/serializeHelper.js","components/dynamicField/dynamicField.jsx","components/dynamicForm/dynamicForm.jsx","App.js","serviceWorker.js","index.js"],"names":["serialize","form","serialized","i","elements","length","field","name","disabled","type","push","value","Object","toConsumableArray","selectedOptions","map","x","checked","JSON","stringify","DynamicField","onChange","event","target","undefined","_this","setState","defineProperty","props","fieldSelector","react_default","a","createElement","htmlFor","id","label","e","className","aria-describedby","placeholder","required","description","definition","options","option","key","display","multiple","this","Component","DynamicForm","state","config","handleChange","console","log","concat","handleSubmit","preventDefault","data","timeStamp","Date","now","parse","onSubmit","_this2","fields","dynamicField","assign","App","submitHandler","json","document","getElementById","innerText","dynamicForm","configData","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b36708e6.chunk.js","sourcesContent":["export default function serialize(form) {\n\n\n    // Setup our serialized data\n    var serialized = [];\n\n    // Loop through each field in the form\n    for (var i = 0; i < form.elements.length; i++) {\n\n        var field = form.elements[i];\n\n        // Don't serialize fields without a name, submits, buttons, file and reset inputs, and disabled fields\n        if (!field.name || field.disabled || field.type === 'file' || field.type === 'reset' || field.type === 'submit' || field.type === 'button') continue;\n\n        // If a multi-select, get all selections\n        if (field.type === 'select-multiple') {\n            serialized.push({name: field.name, value: [...field.selectedOptions].map(x => x.value) });\n        }\n        else if ((field.type !== 'checkbox' && field.type !== 'radio') || field.checked) {\n            serialized.push({ name: field.name, value: field.value });\n        }\n    }\n    return JSON.stringify(serialized);\n};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass DynamicField extends Component {\n\n  onChange = event => {\n    const target = event.target;\n    const name = target.name;\n\n    let value = undefined; \n    switch (target.type) {\n      case 'checkbox':\n        value = target.checked\n        break;\n      case 'select-multiple':\n        value = [...target.selectedOptions].map(x => x.value)\n      break;\n      default:\n        value = target.value;\n        break;\n    }\n\n    this.setState({ [name]: value });\n    this.props.onChange(value);\n  }\n\n  fieldSelector = (props) => {\n    switch (props.type) {\n      case 'text':\n      case 'date':\n      case 'datetime-local':\n      case 'time':\n      case 'number':\n      default:\n        return (\n          <label htmlFor={props.id}>{props.label}\n            <input\n              name={props.id}\n              type={props.type}\n              onChange={(e) => this.onChange(e)}\n              className=\"form-control\"\n              aria-describedby={props.id}\n              placeholder={props.placeholder} \n              required={props.required === \"true\"} />\n            <small id={props.id} className=\"form-text text-muted\">{props.description}</small>\n          </label>\n        )\n\n      case 'checkbox': return (\n        <div className=\"form-check\">\n          <input type=\"checkbox\" className=\"form-check-input\" name={props.id} required={props.required === \"true\"} onChange={(e) => this.onChange(e)} />\n          <label className=\"form-check-label\" htmlFor={props.id}>{props.label}</label>\n        </div>\n      )\n\n      case 'array': return (\n        <label>\n          {props.label}\n          <select className=\"form-control\" name={props.id} required={props.required === \"true\"} onChange={(e) => this.onChange(e)}>\n            <option value=\"0\"></option>\n            {props.definition.options.map((option, i) => {\n              return <option key={i} value={option.id}>{option.display}</option>\n            })}\n          </select>\n          <small id={props.id} className=\"form-text text-muted\">{props.description}</small>\n        </label>\n      )\n\n      case 'multi-array': return (\n        <label>\n          {props.label}\n          <select multiple={true} className=\"form-control\" required={props.required === \"true\"} name={props.id} onChange={(e) => this.onChange(e)}>\n            {props.definition.options.map((option, i) => {\n              return <option key={i} value={option.id}>{option.display}</option>\n            })}\n          </select>\n          <small id={props.id} className=\"form-text text-muted\">{props.description}</small>\n        </label>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"form-group\">\n        {this.fieldSelector(this.props)}\n      </div>\n    )\n  }\n}\n\nDynamicField.propTypes = {\n  id: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  definition: PropTypes.object,\n  required: PropTypes.bool,\n  label: PropTypes.string.isRequired,\n  placeHolder: PropTypes.string\n};\n\nexport default DynamicField;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport serialize from './serializeHelper';\nimport DynamicField from '../dynamicField/dynamicField';\nimport '../../config/style.css';\n\nclass DynamicForm extends Component {\n  state = { config: this.props.config };\n\n  handleChange = (value) => {\n    console.log(`handleChange: ${value}`)\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    let data = {\n      timeStamp: Date.now(),\n      data: JSON.parse(serialize(event.target))\n    }\n    this.props.onSubmit(data);\n  }\n\n  render() {\n    return (\n      <div className=\"card mx-auto mt-5\">\n        <div className=\"card-header\">{this.state.config.name}</div>\n        <div className=\"card-body\">\n          <form onSubmit={(event) => this.handleSubmit(event)} name={this.state.config.name}>\n\n            {this.state.config.fields.map((field, i) => {\n              return <DynamicField key={i} {...field} onChange={(e) => this.handleChange(e)} />\n            })}\n\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nDynamicForm.propTypes = {\n  config: PropTypes.any.isRequired,\n  onSubmit: PropTypes.func\n};\n\nexport default DynamicForm;\n","import React, { Component } from 'react';\nimport DynamicForm from './components/dynamicForm/dynamicForm';\nimport configData from './config/simple.json';\n\nclass App extends Component {\n  submitHandler = (event) => {\n    let json = JSON.stringify(event, null, 4);\n    console.log(json);\n    document.getElementById('result').innerText = json;\n  }\n  render() {\n    return (\n      <div className=\"container\">\n\n        <DynamicForm config={configData} onSubmit={(event) => this.submitHandler(event)} />\n\n        <div className=\"card mx-auto mt-5\">\n          <div className=\"card-header\">Output</div>\n          <div className=\"card-body\">\n            <pre id=\"result\">Press Submit to see the output...</pre>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'))\nserviceWorker.unregister();\n"],"sourceRoot":""}